/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import {StyleSheet, Text, View, Button, NativeModules, Platform} from 'react-native';
import AAIIOSLivenessSDK from 'react-native-aaiios-liveness-sdk';
import { Sha256 } from '@aws-crypto/sha256-js';
import { ACCESS_KEY, SECRET_KEY, APP_ID, ENDPOINT_URL } from '@env';

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
        accessKey: `${ACCESS_KEY}`,
        secretKey: `${SECRET_KEY}`,
        timestamp: 0,
        signature: '',
        token: '',
        periodSeconds: 120,
        message: '--',
        rootPage: true,
        sdkInitSuccess: false,
        licenseStr: ''
    };
}

  componentDidMount() {
    this.getTimestamp().then(() => {
      this.createSignature();
  });
  }

  createSignature = async () => {
    const { accessKey, secretKey, timestamp } = this.state;
    const signature = `${accessKey}${secretKey}${timestamp}`;
    const hash = new Sha256();
    hash.update(signature);
    const result = await hash.digest();
    const hashArray = Array.from(new Uint8Array(result));
    const hashHex = hashArray
        .map((bytes) => bytes.toString(16).padStart(2, '0'))
        .join('');
    this.setState({ signature: hashHex });
};

getTimestamp = () => new Promise((resolve) => {
    const timestamp = new Date().getTime();
    this.setState({ timestamp }, () => {
        resolve();
    });
});

getToken = () => {
  const {
      accessKey, signature, timestamp, periodSeconds
  } = this.state;
  const body = {
      accessKey,
      signature,
      timestamp,
      periodSeconds
  };
  const header = {
      'Content-Type': 'application/json'
  };
  fetch(`${ENDPOINT_URL}/auth/ticket/v1/generate-token`, {
      method: 'POST',
      body: JSON.stringify(body),
      headers: header
  })
      .then((response) => response.json())
      .then((responseJson) => {
          this.setState({ token: responseJson.data.token });
      })
      .catch((error) => {
          console.error(error);
      });
};


onAuthLicense = () => {
  const body = {
      licenseEffectiveSeconds: 600,
      applicationId: `${APP_ID}`
  };
  const header = {
      'X-ACCESS-TOKEN': `${this.state.token}`,
      'Content-Type': 'application/json'
  };

  fetch(`${ENDPOINT_URL}/liveness/v1/auth-license`, {
      method: 'POST',
      body: JSON.stringify(body),
      headers: header
  })
      .then((response) => response.json())
      .then((responseJson) => {
        this.setState({ licenseStr: responseJson.data.license });
      })
      .catch((error) => {
          console.log(error);
      });
};
  runningOnAndroid() {
      NativeModules.LivenessModule.initSDKByLicense('Indonesia', false);
      NativeModules.LivenessModule.setActionSequence(true, ["POS_YAW", "BLINK", "MOUTH"]);
      NativeModules.LivenessModule.setDetectionLevel('HARD');
      NativeModules.LivenessModule.setLicenseAndCheck(this.state.licenseStr, () => {
          NativeModules.LivenessModule.startLiveness(
              (successJsonData) => {
                  const body = {
                      livenessId: successJsonData.livenessId,
                      resultType: 'IMAGE_URL'
                  };
                  const header = {
                      'X-ACCESS-TOKEN': `${this.state.token}`,
                      'Content-Type': 'application/json'
                  };
                  fetch(`${ENDPOINT_URL}/liveness/v3/detection-result`, {
                      method: 'POST',
                      body: JSON.stringify(body),
                      headers: header
                  })
                      .then((response) => response.json())
                      .then((responseJson) => {
                          console.log('RESULT: ', responseJson);
                      })
                      .catch((error) => {
                          console.error(error);
                      });
              // This callback indicates Liveness Detection success
              },
              (failedJsonData) => {
                  // This callback indicates that the Liveness Detection failed or the user canceled the detection
                this.setState({message: failedJsonData.errorMsg})
              }
          );

          // license check success,you can start liveness detection.
      }, (errorCode) => {
          this.setState({message: errorCode})
          // license is not available, expired/wrong format/appId not match
      });
  }

  runningOnIos() {

    /*
    /// Optional 
    // Get SDK version
    AAIIOSLivenessSDK.sdkVersion((message) => {
      console.log("SDK version is ", message)
    });
    */

    // Step 1. Initialize SDK
    // The last boolean value represents whether the Global service is enabled or not, and is set to true if it is, or false if it is not.
    // Market available value are as follows:
    // AAILivenessMarketIndonesia
    // AAILivenessMarketIndia
    // AAILivenessMarketPhilippines
    // AAILivenessMarketVietnam
    // AAILivenessMarketThailand
    // AAILivenessMarketMexico
    // AAILivenessMarketMalaysia
    // AAILivenessMarketPakistan
    // AAILivenessMarketNigeria
    // AAILivenessMarketColombia
    // AAILivenessMarketSingapore
    AAIIOSLivenessSDK.initSDKByLicense("AAILivenessMarketIndonesia", false)

    /*
    /// Optional
    // Configure SDK detection level
    // Available levels are "EASY", "NORMAL", "HARD". Default is "NORMAL".
    // Note that this method must be called before "setLicenseAndCheck", otherwise it won't take effect.
    AAIIOSLivenessSDK.setDetectionLevel("NORMAL")
    */
    AAIIOSLivenessSDK.setDetectionLevel("NORMAL")


    /*
    /// Optional
    // Set wheher to detect occlusion. Default is false.
    AAIIOSLivenessSDK.setDetectOcclusion(true)
    */

    /*
    /// Optional
    // Set action detection time interval. Default is 10s.
    // Note that this value represents the timeout for a motion,
    // not the total timeout for all motions.
    AAIIOSLivenessSDK.setActionTimeoutSeconds(10)
    */

    /*
    /// Optional
    // Set the size(width) of output `img` in `onDetectionComplete`.
    // Image size(width) should be in range [300, 1000], default image size(width) is 600(600x600).
    AAIIOSLivenessSDK.setResultPictureSize(600)
    */

    /*
    /// Optional
    // Set the action sequence. Available action type are "POS_YAW", "BLINK", "MOUTH"
    // the first boolean value indicates if the given actions should be shuffled.
    // Default action sequence ["POS_YAW", "BLINK"] and the order of them is random.
    AAIIOSLivenessSDK.setActionSequence(true, ["POS_YAW", "BLINK", "MOUTH"])
    */
    AAIIOSLivenessSDK.setActionSequence(true, ["POS_YAW", "BLINK", "MOUTH"])


    /*
    /// Optional
    // User binding (strongly recommended).
    // You can use this method to pass your user unique identifier to us,
    // we will establish a mapping relationship based on the identifierã€‚
    // It is helpful for us to check the log when encountering problems.
    AAIIOSLivenessSDK.bindUser("your-reference-id")
    */

    // Step 2. Configure your license(your server needs to call openAPI to obtain license content)

    AAIIOSLivenessSDK.setLicenseAndCheck(this.state.licenseStr, (result) => {
      if (result === "SUCCESS") {
        this.showSDKPage()
      } else {
        console.log("setLicenseAndCheck failed:", result)
        this.setState({message: result})
      }
    })
  }

  sdkDemo() {
    if (Platform.OS === 'android') {
      return this.runningOnAndroid()
    }
    return this.runningOnIos()
  }

  showSDKPage() {
    var config = {
      /*
      /// Optional
      showHUD: true,
      */

      /*
      /// Optional
      /// Specify which language to use for the SDK. If this value is not set,
      /// the system language will be used by default. If the system language is not supported,
      /// English will be used.
      ///
      /// The languages currently supported by sdk are as follows:
      ///
      /// "en" "id"  "vi"  "zh-Hans"  "th"  "es"  "ms" "hi"
      language: "en",
      */
      language: "id",

      /*
      /// Optional
      /// Set the timeout for prepare stage, default is 10s.
      ///
      /// This value refers to the time from when the sdk page is displayed to when the motion detection is ready.
      /// For example, after the sdk page is presented, if the user does not hold the phone upright or put the face in the detection area,
      /// and continues in this state for a certain period of time, then the `onDetectionFailed` will be called,
      /// and the value of the "errorCode" is "fail_reason_prepare_timeout".
      prepareTimeoutInterval: 10,
      */

      /*
      /// Optional
      // Set the color of the round border in the avatar preview area. Default is clear color(#00000000).
      roundBorderColor: "#00000000",
      */

      /*
      /// Optional
      // Set the color of the ellipse dashed line that appears during the liveness detection. Default is white color.
      ellipseLineColor: "#FFFFFF",
      */

      /*
      /// Optional
      // Whether to animate the presentation. Default is true.
      animated: true,
      */

      /*
      /// Optional
      // Whether to display animation images. Default is true. If you set false, then animation images will be hidden.
      showAnimationImgs: true
      */

      /*
      /// Optional
      // Whether to allow to play prompt audio. Default is true.
      playPromptAudio: true,
      */
      playPromptAudio: false,
    }

    // Step 3. Configure callback
    var callbackMap = {
      // Optional
      onCameraPermissionDenied: (errorKey, errorMessage) => {
        console.log(">>>>> onCameraPermissionDenied", errorKey, errorMessage)
        this.setState({message: errorMessage})
      },

      // Optional
      /*
      For `livenessViewBeginRequest` and `livenessViewEndRequest`,
      these two methods are only used to tell you that the SDK is going to start sending network requests and end network requests,
      and are usually used to display and close the loadingView, that is,  if you pass showHUD: false, then you should in method `livenessViewBeginRequest` to show your customized loading view
      and close loading view in method `livenessViewEndRequest`. If you pass showHUD: true, then you do nothing in these two methods.
      */
      livenessViewBeginRequest: () => {
        console.log(">>>>> livenessViewBeginRequest")
      },

      // Optional
      livenessViewEndRequest: () => {
        console.log(">>>>> livenessViewEndRequest")
      },

      // Required
      onDetectionComplete: (livenessId, base64Img) => {
        console.log(">>>>> onDetectionComplete:", livenessId)
        /*
          You need to give the livenessId to your server, then your server will call the anti-spoofing api to get the score of this image.
          The base64Img size is 600x600.
          */
        this.setState({message: livenessId})
      },

      // Optional
      /*
      The error types are as follows, and the corresponding error messages are in the language file of the `Resource/AAILanguageString.bundle/id.lproj/Localizable.strings` (depending on the language used by the phone)

      fail_reason_prepare_timeout
      fail_reason_timeout
      fail_reason_muti_face
      fail_reason_facemiss_blink_mouth
      fail_reason_facemiss_pos_yaw
      fail_reason_much_action

      In fact, for the type of error this function gets, you don't need to pay attention to it, just prompt the error message and let the user retry.
      */
      onDetectionFailed: (errorCode, errorMessage) => {
        console.log(">>>>> onDetectionFailed:", errorCode, errorMessage)
        this.setState({message: errorMessage})
      },

      // Optional
      /*
      This means sdk request failed, it may be that the network is not available, or account problems, or server errors, etc.
      You only need to pay attention to the `errorMessage` and `transactionId`, `transactionId` can be used to help debug the specific cause of the error, generally just prompt the errorMessage.
      */
      onLivenessViewRequestFailed: (errorCode, errorMessage, transactionId) => {
        console.log(">>>>> onLivenessViewRequestFailed:", errorCode, errorMessage, transactionId)
        this.setState({message: errorMessage})
      },

      // Optional
      // This means that the user tapped the back button during liveness detection.
      onGiveUp: () => {
        console.log(">>>>> onGiveUp")
        this.setState({message: "onGiveUp"})
      }
    }

    AAIIOSLivenessSDK.startLiveness(config, callbackMap)
  }

  render() {
    return <View style={styles.container}>
              <Text style={styles.instructions}>STATUS: {this.state.message}</Text>
              <Button
                onPress={()=> {
                  this.getToken()
                }}
                title="Step 1 : Get Token"
                color="#841584"
                style={styles.buttonContent}
              />
              <View style={styles.buttonContent}>
              <Button
                onPress={()=> {
                  this.onAuthLicense()
                }}
                disabled={this.state.token === ''}
                title="Step 2 : Auth License"
                color="#841584"
                style={styles.buttonContent}
              />
              </View>
              <Button
                onPress={()=> {
                  this.sdkDemo()
                }}
                disabled={this.state.licenseStr === ''}
                title="Step 3 : Show Liveness View"
                color="#841584"
              />
      </View>

  }
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  buttonContent: {
    marginVertical: 10,
  }
});
